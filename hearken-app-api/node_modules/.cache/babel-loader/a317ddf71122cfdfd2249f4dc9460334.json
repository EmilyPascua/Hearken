{"ast":null,"code":"import \"source-map-support/register\";\nimport * as dynamoDbLib from \"./libs/dynamodb-lib\";\nimport { success, failure } from \"./libs/response-lib\";\nexport async function main(event, context) {\n  const data = JSON.parse(event.body);\n  const params = {\n    TableName: process.env.tableName,\n    // 'Key' defines the partition key and sort key of the item to be updated\n    // - 'userId': Identity Pool identity id of the authenticated user\n    // - 'noteId': path parameter\n    Key: {\n      uId: event.requestContext.identity.cognitoIdentityId,\n      sKey: event.pathParameters.id\n    },\n    // 'UpdateExpression' defines the attributes to be updated\n    // 'ExpressionAttributeValues' defines the value in the update expression\n    UpdateExpression: \"SET content = :content\",\n    ExpressionAttributeValues: {\n      \":content\": data.content || null\n    },\n    // 'ReturnValues' specifies if and how to return the item's attributes,\n    // where ALL_NEW returns all attributes of the item after the update; you\n    // can inspect 'result' below to see how it works with different settings\n    ReturnValues: \"ALL_NEW\"\n  };\n\n  try {\n    await dynamoDbLib.call(\"update\", params);\n    return success({\n      status: true\n    });\n  } catch (e) {\n    return failure({\n      status: false\n    });\n  }\n}","map":{"version":3,"sources":["C:/workspace/hackathons/Hearken/hearken-app-api/update.js"],"names":["dynamoDbLib","success","failure","main","event","context","data","JSON","parse","body","params","TableName","process","env","tableName","Key","uId","requestContext","identity","cognitoIdentityId","sKey","pathParameters","id","UpdateExpression","ExpressionAttributeValues","content","ReturnValues","call","status","e"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,qBAA7B;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,qBAAjC;AAEA,OAAO,eAAeC,IAAf,CAAoBC,KAApB,EAA2BC,OAA3B,EAAoC;AACzC,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,IAAjB,CAAb;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAEC,OAAO,CAACC,GAAR,CAAYC,SADV;AAEb;AACA;AACA;AACAC,IAAAA,GAAG,EAAE;AACHC,MAAAA,GAAG,EAAEZ,KAAK,CAACa,cAAN,CAAqBC,QAArB,CAA8BC,iBADhC;AAEHC,MAAAA,IAAI,EAAEhB,KAAK,CAACiB,cAAN,CAAqBC;AAFxB,KALQ;AASb;AACA;AACAC,IAAAA,gBAAgB,EAAE,wBAXL;AAYbC,IAAAA,yBAAyB,EAAE;AACzB,kBAAYlB,IAAI,CAACmB,OAAL,IAAgB;AADH,KAZd;AAeb;AACA;AACA;AACAC,IAAAA,YAAY,EAAE;AAlBD,GAAf;;AAqBA,MAAI;AACF,UAAM1B,WAAW,CAAC2B,IAAZ,CAAiB,QAAjB,EAA2BjB,MAA3B,CAAN;AACA,WAAOT,OAAO,CAAC;AAAE2B,MAAAA,MAAM,EAAE;AAAV,KAAD,CAAd;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV,WAAO3B,OAAO,CAAC;AAAE0B,MAAAA,MAAM,EAAE;AAAV,KAAD,CAAd;AACD;AACF","sourcesContent":["import * as dynamoDbLib from \"./libs/dynamodb-lib\";\r\nimport { success, failure } from \"./libs/response-lib\";\r\n\r\nexport async function main(event, context) {\r\n  const data = JSON.parse(event.body);\r\n  const params = {\r\n    TableName: process.env.tableName,\r\n    // 'Key' defines the partition key and sort key of the item to be updated\r\n    // - 'userId': Identity Pool identity id of the authenticated user\r\n    // - 'noteId': path parameter\r\n    Key: {\r\n      uId: event.requestContext.identity.cognitoIdentityId,\r\n      sKey: event.pathParameters.id\r\n    },\r\n    // 'UpdateExpression' defines the attributes to be updated\r\n    // 'ExpressionAttributeValues' defines the value in the update expression\r\n    UpdateExpression: \"SET content = :content\",\r\n    ExpressionAttributeValues: {\r\n      \":content\": data.content || null\r\n    },\r\n    // 'ReturnValues' specifies if and how to return the item's attributes,\r\n    // where ALL_NEW returns all attributes of the item after the update; you\r\n    // can inspect 'result' below to see how it works with different settings\r\n    ReturnValues: \"ALL_NEW\"\r\n  };\r\n\r\n  try {\r\n    await dynamoDbLib.call(\"update\", params);\r\n    return success({ status: true });\r\n  } catch (e) {\r\n    return failure({ status: false });\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}