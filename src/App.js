import React from 'react';
import firebase from 'firebase'
import fire from './fire'
import Home from './components/home/Home.js';
import Login from './components/login/Login.js';
// import Register from './components/register/Register.js';
import Reply from './components/reply/Reply.js';
import Settings from './components/settings/Settings.js';
import Stories from './components/stories/Stories.js';
import Story from './components/story/Story.js';

import './App.css';

const db = fire.database()

class App extends React.Component {
	state = {
		user: null,
		settingsVisible: false,
        theme: null,
        greetingMessage: null,
        authorized: false
    }
  
    actions = {
        postStory: (story) => {
            const storiesRef = db.ref(`stories/`)
                //using firebase's autogenerated key for the ID
                //push creates a new empty entry to the database that can be referenced
                ,newId = storiesRef.push().key
                ,date = new Date()
                ,month = date.getMonth() + 1
                ,time = date.getTime()
                ,createdOn = month + '/' + date.getDate() + '/' + date.getFullYear() + '  @' + time;

            story.id = newId
            story.user = this.state.user.displayName
            story.created = createdOn

            storiesRef.update({
                [newId]: story
            })
        },
        // Updates user's status if matched or no longer matched
        updateIsMatched: (user, isMatched) => {
            user.isMatched = isMatched;

            db.ref("users/" + user.user_id).update(user);
        },
        insertUser: user => {
            db.ref("users/" + user.user_id).set(user);
        },
        // TO-DO: Replace hard-coded value of totalTraits
        getMatch: userTraits => {
            // Hard-coded value of total # of traits possible.
            // Used to calculate percentage of match
            let totalTraits = 6;

            let matchedUser = {};
            let percentage = -1;

            db.ref("users").once("value").then( snapshot => {
                let dbUsers = snapshot.val();

                for (let key in dbUsers) {
                    if (dbUsers.hasOwnProperty(key)) {

                    if(!(dbUsers[key].isMatched)) {
                        continue;
                    }
                        
                    let dbTraits = dbUsers[key].traits;
                    
                    userTraits = new Set(userTraits);

                    let intersection = new Set(dbTraits.filter(trait => userTraits.has(trait)));
                    
                    let tempPercentage = Math.round((intersection.size / totalTraits) * 100);

                    // If multiple users have the highest percentage, then keep the first.
                    if(tempPercentage > percentage) {
                        percentage = tempPercentage; 
                        matchedUser = dbUsers[key];
                    }
                    }
                }

                // matchedUser = {} if no match was found
                this.setState({
                    matchUser: matchedUser
                });
            });
        },
        googleLogin: () => {
            const provider = new firebase.auth.GoogleAuthProvider()

            firebase.auth().signInWithPopup(provider)
                .then((u) => {
                    // const token = u.credential.accessToken
                    const {displayName,email,emailVerified,photoURL,uid} = u.user
                        ,userObj = {
                            displayName: displayName,
                            email: email,
                            emailVerified: emailVerified,
                            photoURL: photoURL,
                            uid: uid
                        }

                    const usersRef = db.ref('users');
                    let isAuthorized = false;

                    usersRef.once("value", function(data) {
                        for (const dbUser in data.val()) {
                            if (dbUser == uid) {
                                isAuthorized = true;
                                return;
                            }
                        }
                    });
                    console.log(isAuthorized)

                    if (isAuthorized === false) {
                        usersRef.update(
                            {
                                [uid]: userObj
                            }
                        );
                        console.log('registered new user');
                    }
                    this.setState({user: userObj,authorized: true});
                    
                    console.log('Successfully Logged In' + ' ' + this.state.user.email);
                })
                .catch((err) => {
                    console.log('Error: ' + err.toString())
                });
        },
        signout: () => {
            fire.auth().signOut()
                .then((u) => {
                    this.setState({user: null,authorized: false})
                    console.log('user logged off');
                })
                .catch((err) => {
                    console.log('Error: ' + err.toString())
                });
        }	
    }

    componentDidMount() {
        //Get time to set the theme
        let today = new Date();

        // I'll leave this here for now, not really needed for this. May be needed in the future.
        // let date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();
        // let dateTime = date+' '+timeOfDay;

        let timeOfDay = today.getHours()
            ,theme = null
            ,greetingMessage = null;
        
        if (timeOfDay >= 0 && timeOfDay < 12){
            theme = ["#6f0979", "#ffebbd"];
            greetingMessage = "Good Morning, anything you want to tell me?";
        }
        else if (timeOfDay >= 12 && timeOfDay < 16){
            theme = ["#425891", "#acd9da"];
            greetingMessage = "Good Day! How's it going?";
        }
        else if (timeOfDay >= 16 && timeOfDay < 21){
            theme = ["#872458", "#f78300"];
            greetingMessage = "Good Afternoon - let's talk about it!";
        }
        else if (timeOfDay >= 21 && timeOfDay < 24){
            theme = ["#151416", "#564379"];
            greetingMessage = "Good Evening, anything you want to tell me?";
        }

        this.setState({
            theme:{
                height: "100vh",
                backgroundImage: "linear-gradient("+theme[0]+","+theme[1]+")",
                overflow: "hidden",
            }
            ,greetingMessage: greetingMessage
        });

        fire.auth().onAuthStateChanged((user) => {
            console.log('state changed');
            if (user) {
                const {displayName,email,emailVerified,photoURL,uid} = user
                        ,userObj = {
                            displayName: displayName,
                            email: email,
                            emailVerified: emailVerified,
                            photoURL: photoURL,
                            uid: uid
                        }
                this.setState({user: userObj,authorized: true})
                console.log('returning authorized user');
            }
        });
    }

    render(){

		return (
			<div>
				{this.state.authorized === true && <Home actions={this.actions} theme={this.state.theme} greetingMessage={this.state.greetingMessage}/>}
				{this.state.authorized === false && /*!this.state.settingsVisible&&*/ <Login actions={this.actions}/>}
				{/* {this.state.settingsVisible && <Settings/>} */}
			</div>
		)
    }
}

export default App;